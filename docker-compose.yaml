version: "3.2"  
services:
  cowrie:
    build:
      context: .
      dockerfile: images/cowrie/Dockerfile
    container_name: cowrie
    hostname: cowrie
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    cap_add:
      - ALL
    ports: 
      - "2222:2222"
      - "2223:2223"
    mac_address: 02:42:c0:a8:00:0a
    networks:
      network:
        ipv4_address: 10.0.0.10

  attacker:
    build: 
      context: .
      dockerfile: images/attacker/Dockerfile
    container_name: attacker
    hostname: attacker
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    cap_add:
      - ALL
    ports: 
      - "9990-9999:9990-9999"
    volumes:
      - $HOME/.msf4:/root/.msf4
      - /tmp/msf:/tmp/data
    mac_address: 02:42:c0:a8:00:14
    networks:
      network:
        ipv4_address: 10.0.0.20

  honeydocserver:
    build: 
      context: .
      dockerfile: images/honeydocserver/Dockerfile
    container_name: honeydocserver
    hostname: honeydocserver
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    cap_add:
      - ALL
    ports: 
      - "8080:80"
    mac_address: 02:42:c0:a8:00:15
    networks:
      network:
        ipv4_address: 10.0.0.30
        
  dionaea:
    build: 
      context: .
      dockerfile: images/dionaea/Dockerfile
    container_name: dionaea
    hostname: dionaea
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    cap_add:
      - ALL
    ports: 
      - "21:21"
      - "42:42"
      - "69:69/udp"
      - "80:80"
      - "135:135"
      - "443:443"
      - "777:445"
      - "1433:1433"
      - "1723:1723"
      - "1883:1883"
      - "1900:1900/udp"
      - "3306:3306"
      - "5060:5060"
      - "5060:5060/udp"
      - "5061:5061"
      - "11211:11211"
    mac_address: 02:42:c0:a8:00:16
    networks:
      network:
        ipv4_address: 10.0.0.40
  
  elasticsearch:
    build:
      context: elasticsearch/
    container_name: elasticsearch  
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - network

  logstash:
    build:
      context: logstash/
    container_name: logstash 
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - network
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
    container_name: kibana 
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - network
    depends_on:
      - elasticsearch      

volumes:
  elasticsearch:

networks:
  network:
    ipam:
      driver: default
      config:
        - subnet: "10.0.0.0/24"
    driver_opts:
      com.docker.network.bridge.name: netsec_lab_if


